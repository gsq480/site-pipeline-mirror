name: Site Factory

on:
  workflow_dispatch:
    inputs:
      site_name:
        description: 'Human-readable site name'
        required: true
        type: string
      prompt:
        description: 'AI prompt to generate the site'
        required: true
        type: string
      industry:
        description: 'Industry'
        required: false
        type: string
        default: 'auto-detect'
      strict_mode:
        description: 'Strict mode (fail on unknown blocks)'
        required: false
        type: choice
        options: ["false","true"]
        default: "false"
      deploy:
        description: 'Deploy after build'
        required: false
        type: choice
        options: ["true","false"]
        default: "true"
      domain:
        description: 'Public domain (optional)'
        required: false
        type: string
  issues:
    types: [labeled]

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  factory:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && contains(join(github.event.issue.labels.*.name, ','), 'new-site'))
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve inputs (issue vs dispatch)
        id: inputs
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const ctx = context;
            let site_name = core.getInput('site_name');
            let prompt = core.getInput('prompt');
            let industry = core.getInput('industry') || 'auto-detect';
            let strict_mode = core.getInput('strict_mode') || 'false';
            let deploy = core.getInput('deploy') || 'true';
            let domain = core.getInput('domain') || '';
            if (ctx.eventName === 'issues') {
              const body = ctx.payload.issue.body || '';
              const from = (k) => (new RegExp(`^${k}:\\s*(.*)$`, 'mi').exec(body)||[])[1] || '';
              site_name = from('site_name') || ctx.payload.issue.title || site_name;
              prompt = from('prompt') || prompt;
              industry = from('industry') || industry;
              strict_mode = from('strict_mode') || strict_mode;
              deploy = from('deploy') || deploy;
              domain = from('domain') || domain;
            }
            const slug = site_name.toLowerCase().trim().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
            core.setOutput('site_name', site_name);
            core.setOutput('prompt', prompt);
            core.setOutput('industry', industry);
            core.setOutput('strict_mode', strict_mode);
            core.setOutput('deploy', deploy);
            core.setOutput('domain', domain);
            core.setOutput('slug', slug);

      - name: Create repo from template
        run: |
          set -euo pipefail
          OWNER=${GITHUB_REPOSITORY%%/*}
          TEMPLATE=${GITHUB_REPOSITORY#*/}
          NEW=${{ steps.inputs.outputs.slug }}
          echo "Creating repo $OWNER/$NEW from template $OWNER/$TEMPLATE"
          gh api -X POST repos/$OWNER/$TEMPLATE/generate -f owner=$OWNER -f name="$NEW" -F private=true -F include_all_branches=false >/dev/null
          gh api -X PATCH repos/$OWNER/$NEW -f has_issues=true -f has_projects=false -f has_wiki=false >/dev/null
          echo "repo_url=https://github.com/$OWNER/$NEW" >> $GITHUB_OUTPUT
        id: create

      - name: Seed website.json
        run: |
          set -euo pipefail
          OWNER=${GITHUB_REPOSITORY%%/*}
          REPO=${{ steps.inputs.outputs.slug }}
          TMP=$(mktemp)
          jq -n \
            --arg slug "${{ steps.inputs.outputs.slug }}" \
            --arg name "${{ steps.inputs.outputs.site_name }}" \
            '{slug:$slug,name:$name,tagline:"Generated by SiteFuse",pages:[{slug:"home",title:"Home",layout:"landing",blocks:[]}]}'> "$TMP"
          B64=$(base64 -w 0 "$TMP" 2>/dev/null || base64 "$TMP" | tr -d '\n')
          gh api -X PUT repos/$OWNER/$REPO/contents/website.json -f message='chore: seed website.json' -f content="$B64" -f branch=main >/devnull 2>&1 || \
          gh api -X PUT repos/$OWNER/$REPO/contents/website.json -f message='chore: seed website.json' -f content="$B64" -f branch=main >/dev/null

      - name: Configure repo secrets/vars
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ steps.inputs.outputs.slug }}
          ORIGIN: ${{ vars.SITEFUSE_WP_ORIGIN_DEFAULT }}
        run: |
          set -euo pipefail
          # Secrets copied from this repo into the new repo
          for S in CLOUDWAYS_HOST CLOUDWAYS_USER CLOUDWAYS_KEY APP_PATH SITEFUSE_TOKEN; do
            VAL=${S}
            printf "%s" "${!S}" >/dev/null 2>&1 || true
          done
          # Using gh secret set with env indirection (uses PAT_TOKEN)
          [ -n "${{ secrets.CLOUDWAYS_HOST }}" ] && echo -n "${{ secrets.CLOUDWAYS_HOST }}" | gh secret set -R "$OWNER/${{ steps.inputs.outputs.slug }}" CLOUDWAYS_HOST
          [ -n "${{ secrets.CLOUDWAYS_USER }}" ] && echo -n "${{ secrets.CLOUDWAYS_USER }}" | gh secret set -R "$OWNER/${{ steps.inputs.outputs.slug }}" CLOUDWAYS_USER
          [ -n "${{ secrets.CLOUDWAYS_KEY }}" ] && echo -n "${{ secrets.CLOUDWAYS_KEY }}" | gh secret set -R "$OWNER/${{ steps.inputs.outputs.slug }}" CLOUDWAYS_KEY
          [ -n "${{ secrets.APP_PATH }}" ] && echo -n "${{ secrets.APP_PATH }}" | gh secret set -R "$OWNER/${{ steps.inputs.outputs.slug }}" APP_PATH
          [ -n "${{ secrets.SITEFUSE_TOKEN }}" ] && echo -n "${{ secrets.SITEFUSE_TOKEN }}" | gh secret set -R "$OWNER/${{ steps.inputs.outputs.slug }}" SITEFUSE_TOKEN
          # Vars
          if [ -n "${{ steps.inputs.outputs.domain }}" ]; then
            gh variable set -R "$OWNER/${{ steps.inputs.outputs.slug }}" SITEFUSE_WP_ORIGIN --body "https://${{ steps.inputs.outputs.domain }}"
          elif [ -n "$ORIGIN" ]; then
            gh variable set -R "$OWNER/${{ steps.inputs.outputs.slug }}" SITEFUSE_WP_ORIGIN --body "$ORIGIN"
          fi

      - name: Kick off provision in new repo
        run: |
          set -euo pipefail
          OWNER=${GITHUB_REPOSITORY%%/*}
          REPO=${{ steps.inputs.outputs.slug }}
          gh api repos/$OWNER/$REPO/actions/workflows/main-provision-from-prompt.yml/dispatches \
            -f ref=main \
            -F inputs[prompt]='${{ steps.inputs.outputs.prompt }}' \
            -F inputs[industry]='${{ steps.inputs.outputs.industry }}' \
            -F inputs[generate_images]=true \
            -F inputs[strict_mode]='${{ steps.inputs.outputs.strict_mode }}' \
            -F inputs[deploy]='${{ steps.inputs.outputs.deploy }}' \
            -F inputs[generate_preview]=true

      - name: Summary
        run: |
          echo "## Site Factory" >> $GITHUB_STEP_SUMMARY
          echo "- Repo: ${{ steps.create.outputs.repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Slug: ${{ steps.inputs.outputs.slug }}" >> $GITHUB_STEP_SUMMARY
          echo "- Prompt: ${{ steps.inputs.outputs.prompt }}" >> $GITHUB_STEP_SUMMARY
          echo "- Strict mode: ${{ steps.inputs.outputs.strict_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy: ${{ steps.inputs.outputs.deploy }}" >> $GITHUB_STEP_SUMMARY
