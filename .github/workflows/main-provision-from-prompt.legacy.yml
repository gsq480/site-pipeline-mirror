# .github/workflows/main-provision-from-prompt.yml
name: Create Website from Prompt

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Describe your website, for example "Modern yoga studio with earth tones and mindfulness focus"'
        required: true
        type: string
      industry:
        description: 'Industry type'
        required: false
        type: choice
        options:
          - auto-detect
          - restaurant
          - bakery
          - yoga-studio
          - law-firm
          - photography
          - consulting
          - medical
          - retail
          - real-estate
          - technology
        default: auto-detect
      generate_images:
        description: 'Generate AI images'
        required: false
        default: true
        type: boolean
      generate_preview:
        description: 'Generate a simple preview artifact (HTML) before deploy'
        required: false
        default: false
        type: boolean
      generate_logo:
        description: 'Use AI to generate a logo (Vertex)'
        required: false
        default: false
        type: boolean
      strict_mode:
        description: 'Fail build if unknown blocks are found'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      deploy:
        description: 'Deploy after build'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  actions: write

concurrency:
  group: sitefuse-${{ github.ref }}
  cancel-in-progress: false

jobs:
  generate:
    name: Generate Configuration
    uses: ./.github/workflows/01-ai-generate.yml
    with:
      prompt: ${{ inputs.prompt }}
      industry: ${{ inputs.industry }}
      generate_images: ${{ inputs.generate_images }}
    secrets: inherit

  build:
    name: Build Theme
    needs: [generate, figma_sync_summary]
    uses: ./.github/workflows/02-build-theme.yml
    with:
      config_artifact: ${{ needs.generate.outputs.config_artifact }}
      strict_mode: ${{ inputs.strict_mode }}
      generate_logo: ${{ inputs.generate_logo }}
    secrets: inherit

  figma_sync:
    name: Refresh Figma Spec
    needs: generate
    uses: ./.github/workflows/00-figma-sync.yml
    secrets: inherit

  figma_sync_summary:
    name: Figma Refresh Summary
    needs: figma_sync
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Append summary
        run: |
          echo "### Figma spec refreshed (design-spec.json)" >> $GITHUB_STEP_SUMMARY

  preview:
    name: Build Preview (optional)
    needs: [generate, build]
    if: ${{ inputs.generate_preview }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download config artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate.outputs.config_artifact }}
      - name: Generate preview HTML
        run: |
          set -euo pipefail
          mkdir -p preview
          TITLE=$(jq -r '.name // "Site"' website.json)
          TAGLINE=$(jq -r '.tagline // ""' website.json)
          cat > preview/index.html << 'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
          <title>SiteFuse Preview</title>
          <style>
            body{font-family:system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; padding:24px; line-height:1.5}
            .page{margin:24px 0; padding:16px; border:1px solid #eee; border-radius:12px}
            h1{margin:0 0 8px}
            h2{margin:16px 0 8px}
            ul{margin:0; padding-left:20px}
            .muted{color:#666}
          </style>
          <h1 id="title"></h1>
          <div class="muted" id="tag"></div>
          <div id="pages"></div>
          <script>
          fetch('website.json').then(r=>r.json()).then(site=>{
            const title = document.getElementById('title');
            const tag = document.getElementById('tag');
            title.textContent = site.name || 'Site';
            tag.textContent = site.tagline || '';
            const pages = Array.isArray(site.pages) ? site.pages : [{title:'Home', blocks: (site.blocks||[])}];
            const root = document.getElementById('pages');
            pages.forEach(p=>{
              const wrap = document.createElement('div'); wrap.className='page';
              const h2=document.createElement('h2'); h2.textContent=p.title||p.slug||'Page'; wrap.appendChild(h2);
              const ul=document.createElement('ul');
              (p.blocks||[]).forEach(b=>{ const li=document.createElement('li'); li.textContent=b.type||b.name||'block'; ul.appendChild(li); });
              wrap.appendChild(ul); root.appendChild(wrap);
            });
          })
          </script>
          HTML
      - name: Upload preview artifact
        uses: actions/upload-artifact@v4
        with:
          name: preview-${{ github.run_id }}
          path: |
            website.json
            preview/

  commit:
    name: Commit website.json only
    needs: [generate, build]
    runs-on: ubuntu-latest
    outputs:
      slug: ${{ steps.extract.outputs.slug }}
      name: ${{ steps.extract.outputs.name }}
      tagline: ${{ steps.extract.outputs.tagline }}
      commit_sha: ${{ steps.commit_out.outputs.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: List artifacts for this run
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
              per_page: 100
            });
            core.info('Artifacts found:');
            for (const a of data.artifacts) core.info(`- ${a.name} (${a.size_in_bytes} bytes)`);

      - name: Download config artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.generate.outputs.config_artifact }}

      - name: Download theme artifact
        uses: actions/download-artifact@v4
        with:
          pattern: theme-*-${{ github.run_id }}
          merge-multiple: true

      - name: Sanity check website.json
        run: |
          test -s website.json || { echo "website.json missing"; exit 1; }
          jq '.' website.json >/dev/null

      - name: Extract values for output
        id: extract
        run: |
          echo "slug=$(jq -r '.slug // "business-site"' website.json)" >> $GITHUB_OUTPUT
          echo "name=$(jq -r '.name // "Your Business"' website.json)" >> $GITHUB_OUTPUT
          echo "tagline=$(jq -r '.tagline // "Professional services"' website.json)" >> $GITHUB_OUTPUT

      - name: Commit website.json (rebase + retry)
        id: commit_out
        env:
          PROMPT_TEXT: ${{ inputs.prompt }}
          NAME: ${{ steps.extract.outputs.name }}
        run: |
          git config user.name  "SiteFuse AI Bot"
          git config user.email "ai-bot@sitefuse.com"
          git add website.json || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "sha=" >> $GITHUB_OUTPUT
          else
            git commit -m "feat: AI website config for '${NAME}' from prompt: ${PROMPT_TEXT}"
            n=0
            until [ "$n" -ge 4 ]; do
              git fetch origin main || true
              git pull --rebase origin main || true
              if git push origin HEAD:main; then break; fi
              n=$((n+1)); echo "Push failed, retry $n/3 after rebase"; sleep 2;
            done
            echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to Server
    needs: [generate, build, commit]
    if: ${{ inputs.deploy }}
    uses: ./.github/workflows/03-deploy.yml
    with:
      theme_artifact: theme-${{ needs.commit.outputs.slug }}-${{ github.run_id }}
      slug:    ${{ needs.commit.outputs.slug }}
      name:    ${{ needs.commit.outputs.name }}
      tagline: ${{ needs.commit.outputs.tagline }}
    secrets: inherit

  cleanup:
    name: Cleanup Artifacts
    needs: [generate, build, commit]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            ${{ needs.generate.outputs.config_artifact }}
            theme-${{ needs.commit.outputs.slug }}-${{ github.run_id }}
          useGlob: true
          failOnError: false

  summary:
    name: Run Summary
    needs: [generate, figma_sync, build, commit]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Append summary
        env:
          PROMPT: ${{ inputs.prompt }}
          RAW_URL: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/design-spec.json
          CFG_ART: ${{ needs.generate.outputs.config_artifact }}
          SHA: ${{ needs.commit.outputs.commit_sha }}
        run: |
          echo "## SiteFuse Provision Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Prompt: ${PROMPT:0:120}" >> $GITHUB_STEP_SUMMARY
          echo "- Design Spec: ${RAW_URL}" >> $GITHUB_STEP_SUMMARY
          echo "- Config Artifact: ${CFG_ART}" >> $GITHUB_STEP_SUMMARY
          if [ -n "$SHA" ]; then
            echo "- Commit: https://github.com/${GITHUB_REPOSITORY}/commit/${SHA}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Commit: (no changes)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ inputs.deploy }}" = "true" ]; then
            echo "- Deployment: triggered (see Deploy job)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Deployment: skipped" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Download run summaries
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: run-summary-*-${{ github.run_id }}
          merge-multiple: true
          path: run-summary
        continue-on-error: true

      - name: Append diagnostics
        if: always()
        run: |
          if [ -f run-summary/ai.json ]; then
            echo "\n### AI Generation" >> $GITHUB_STEP_SUMMARY
            jq -r 'to_entries[] | "- \(.key): \(.value|tostring)"' run-summary/ai.json | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || true
          fi
          if [ -f run-summary/build.json ]; then
            echo "\n### Theme Build" >> $GITHUB_STEP_SUMMARY
            jq -r 'to_entries[] | "- \(.key): \(.value|tostring)"' run-summary/build.json | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || true
          fi
          if [ -f run-summary/deploy.json ]; then
            echo "\n### Deployment" >> $GITHUB_STEP_SUMMARY
            jq -r 'to_entries[] | "- \(.key): \(.value|tostring)"' run-summary/deploy.json | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || true
          fi
